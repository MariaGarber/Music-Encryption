#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    Apr 14, 2019 06:06:16 PM +0300  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
from PIL import ImageTk
import PIL.Image
from tkinter import *
import tkinter.filedialog
from encrypt import *
from decrypt import *
from WavSteg import hide_data,recover_data
from tkinter import messagebox

back=None
pri=None
pub=None
globaluser=None

class MusicEncrypt(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        self._frame = None
        self.switch_frame(SignIn)
        top = self
        top.geometry("640x480+336+136")
        top.title("Sign in")
        top.configure(background="#ffffff")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="#2bc0ff")
        center(top)

    def switch_frame(self, frame_class):
        """Destroys current frame and replaces it with a new one."""
        global back
        back = type(self._frame)
        if self._frame is not None:
            for widget in self.winfo_children():
                widget.destroy()
            if back == Register:
                back = SignIn
            if back == Decryption:
                back = MainMenu
            self._frame.backbutton = tk.Button(text="Back", command=lambda: self.switch_frame(back)).pack()
        new_frame = frame_class(self)
        self._frame = new_frame
        self._frame.pack()

def checkregister(password,username,password2,master):
    global pri,pub
    if(username==""):
        messagebox.showinfo("Error", "Username missing!")
    if(password!="" and password2!=""):
        if(password==password2):
            check=register(username,password)
            if(check==False):
                messagebox.showinfo("Error", "UserName Already Exists")
            else:
                pub,pri=check
                master.switch_frame(Keys)
        else:
            messagebox.showinfo("Error", "Passwords are not the same")
    else:
        messagebox.showinfo("Error", "Passwords Are empty!")




class Register(tk.Frame):
    def __init__(self, master):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        global back
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        tk.Frame.__init__(self, master)
        top = master
        top.title("Register")


        self.tex45 = tk.Entry()
        self.tex45.place(relx=0.433, rely=0.4, relheight=0.053, relwidth=0.39)
        self.tex45.configure(background="white")
        self.tex45.configure(font="TkTextFont")
        self.tex45.configure(foreground="black")
        self.tex45.configure(highlightbackground="#d9d9d9")
        self.tex45.configure(highlightcolor="black")
        self.tex45.configure(insertbackground="black")
        self.tex45.configure(selectbackground="#c4c4c4")
        self.tex45.configure(selectforeground="black")
        self.tex45.configure(width=234, show="*")

        self.Text2 = tk.Entry()
        self.Text2.place(relx=0.433, rely=0.511, relheight=0.053, relwidth=0.39)
        self.Text2.configure(background="white")
        self.Text2.configure(font="TkTextFont")
        self.Text2.configure(foreground="black")
        self.Text2.configure(highlightbackground="#d9d9d9")
        self.Text2.configure(highlightcolor="black")
        self.Text2.configure(insertbackground="black")
        self.Text2.configure(selectbackground="#c4c4c4")
        self.Text2.configure(selectforeground="black")
        self.Text2.configure(width=234, show="*")
        tooltip_font = "TkDefaultFont"
        ToolTip(self.Text2, tooltip_font, '''password''', delay=0.5)

        self.Label1 = tk.Label()
        self.Label1.place(relx=0.35, rely=0.089, height=41, width=160)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#ffffff")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 20 -weight bold -underline 1")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Register''')

        self.Text1 = tk.Entry()
        self.Text1.place(relx=0.433, rely=0.289, relheight=0.053, relwidth=0.39)
        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(selectforeground="black")
        self.Text1.configure(width=234)

        self.Label2 = tk.Label()
        self.Label2.place(relx=0.2, rely=0.267, height=34, width=110)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#ffffff")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Segoe UI} -size 15 -weight bold")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Username''')

        self.Label3 = tk.Label()
        self.Label3.place(relx=0.217, rely=0.378, height=34, width=95)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#ffffff")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font="-family {Segoe UI} -size 15 -weight bold")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Password''')

        self.Label4 = tk.Label()
        self.Label4.place(relx=0.1, rely=0.489, height=34, width=167)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#ffffff")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(font="-family {Segoe UI} -size 15 -weight bold")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Repeat Password''')
        self.Button2 = tk.Button()
        self.Button2.place(relx=0.383, rely=0.667, height=54, width=149)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#28f7f7")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(font="-family {Segoe UI} -size 12 -weight bold")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Submit''',command=lambda: (checkregister(self.tex45.get(),self.Text1.get(),self.Text2.get(),master)))

def checklogin(username,password,master):
    global globaluser
    if(login(username,password)):
        globaluser=username
        master.switch_frame(MainMenu)
    else:
        messagebox.showinfo("Error", "User name or password wrong")

class SignIn(tk.Frame):
    def __init__(self, master):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        tk.Frame.__init__(self, master)
        img = ImageTk.PhotoImage(PIL.Image.open("logo.png"))

        imglabel = Label(self, image=img,bg='#FFFFFF')
        imglabel.grid(row=1, column=1)
        imglabel.img = img
        imglabel.pack(side = "bottom", fill = "both", expand = "yes")
        self.Button1 = tk.Button()
        self.Button1.place(relx=0.383, rely=0.778, height=54, width=165)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#4af9ff")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(font="-family {Segoe UI} -size 12 -weight bold")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Register''',command=lambda: (master.switch_frame(Register)))


        self.Text1 = tk.Entry()
        self.Text1.place(relx=0.35, rely=0.31, relheight=0.053, relwidth=0.39)
        self.Text1.configure(background="#ffffff")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(selectforeground="black")
        self.Text1.configure(width=214)
        self.Text2 = tk.Entry()
        self.Text2.place(relx=0.35, rely=0.44, relheight=0.053, relwidth=0.39)
        self.Text2.configure(background="#ffffff")
        self.Text2.configure(font="TkTextFont")
        self.Text2.configure(foreground="black")
        self.Text2.configure(highlightbackground="#d9d9d9")
        self.Text2.configure(highlightcolor="black")
        self.Text2.configure(insertbackground="black")
        self.Text2.configure(selectbackground="#c4c4c4")
        self.Text2.configure(selectforeground="black")
        self.Text2.configure(width=214,show="*")


        self.Label2 = tk.Label()
        self.Label2.place(relx=0.117, rely=0.289, height=31, width=121)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#ffffff")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Segoe UI} -size 19 -weight bold")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Username''')

        self.Label3 = tk.Label()
        self.Label3.place(relx=0.117, rely=0.422, height=31, width=114)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#ffffff")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font="-family {Segoe UI} -size 19 -weight bold")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Password''')

        self.Button1_1 = tk.Button()
        self.Button1_1.place(relx=0.383, rely=0.6, height=54, width=165)
        self.Button1_1.configure(activebackground="#ececec")
        self.Button1_1.configure(activeforeground="#000000")
        self.Button1_1.configure(background="#4af9ff")
        self.Button1_1.configure(disabledforeground="#a3a3a3")
        self.Button1_1.configure(font="-family {Segoe UI} -size 12 -weight bold")
        self.Button1_1.configure(foreground="#000000")
        self.Button1_1.configure(highlightbackground="#d9d9d9")
        self.Button1_1.configure(highlightcolor="black")
        self.Button1_1.configure(pady="0")
        self.Button1_1.configure(text='''Sign in''', command=lambda: (checklogin(self.Text1.get(),self.Text2.get(),master)))


class Keys(tk.Frame):
    def __init__(self, master):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        tk.Frame.__init__(self, master)
        master.title("Keys")
        self.Label1 = tk.Label()
        self.Label1.place(relx=0.05, rely=0.2, height=38, width=145)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#ffffff")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 15 -weight bold")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Private Key''')

        self.Label2 = tk.Label()
        self.Label2.place(relx=0.017, rely=0.444, height=38, width=166)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#ffffff")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Segoe UI} -size 15 -weight bold")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Public Key''')

        self.Button1 = tk.Button()
        self.Button1.place(relx=0.367, rely=0.733, height=54, width=196)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#2bede0")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(font="-family {Segoe UI} -size 12 -weight bold")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Export''',command=lambda:saveas())

        self.Text1 = tk.Text()
        self.Text1.place(relx=0.283, rely=0.222, relheight=0.187, relwidth=0.54)
        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(selectforeground="black")
        self.Text1.configure(width=324)
        self.Text1.configure(wrap="word")

        self.Text2 = tk.Text()
        self.Text2.place(relx=0.283, rely=0.467, relheight=0.187, relwidth=0.54)
        self.Text2.configure(background="white")
        self.Text2.configure(font="TkTextFont")
        self.Text2.configure(foreground="black")
        self.Text2.configure(highlightbackground="#d9d9d9")
        self.Text2.configure(highlightcolor="black")
        self.Text2.configure(insertbackground="black")
        self.Text2.configure(selectbackground="#c4c4c4")
        self.Text2.configure(selectforeground="black")
        self.Text2.configure(width=324)
        self.Text2.configure(wrap="word")
        self.Text2.insert('1.0',pri)
        self.Text1.insert('1.0',pub)

def saveas():
    directory = tkinter.filedialog.asksaveasfilename(title='Save as Private key',defaultextension = 'pgp',filetypes=[('Key File (*.pgp)', ".pgp"),('Text Files (*.txt)', ".txt")])
    if(directory != ''):
        f = open(directory, "w")
        f.write(pub.decode())
        f.close()


class MainMenu(tk.Frame):
    def __init__(self, master):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        tk.Frame.__init__(self, master)
        master.title("Main Menu")

        self.Frame1 = tk.Frame()
        self.Frame1.place(relx=0.283, rely=0.089, relheight=0.789
                , relwidth=0.458)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#ffffff")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")
        self.Frame1.configure(width=275)

        self.Button1 = tk.Button(self.Frame1)
        self.Button1.place(relx=0.145, rely=0.169, height=52, width=198)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#21f8ff")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(font="-family {Segoe UI} -size 13 -weight bold")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Decryption''',command=lambda: (master.switch_frame(Decryption)))

        self.Button2 = tk.Button(self.Frame1)
        self.Button2.place(relx=0.145, rely=0.451, height=52, width=198)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#30fff8")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(font="-family {Segoe UI} -size 13 -weight bold")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Encryption''',command=lambda: (master.switch_frame(Encryption)))

        self.Button3 = tk.Button(self.Frame1)
        self.Button3.place(relx=0.145, rely=0.732, height=52, width=198)
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#33ffff")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(font="-family {Segoe UI} -size 13 -weight bold")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Generate''',command=lambda : generate(master))

        self.Label1 = tk.Label()
        self.Label1.place(relx=0, rely=0, height=51, width=150)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#ffffff")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 10 ")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Logged in as: '''+globaluser)

def generate(master):
    global pri,pub
    MsgBox = tk.messagebox.askquestion('Warning', 'Are you sure you want to Re-Generate Your keys?',
                                       icon='warning')
    if MsgBox == 'yes':
        pub,pri=regenerate(globaluser)
        master.switch_frame(Keys)
    else:
        pass
def encryptmsg(key,msg,file):
    directory = tkinter.filedialog.asksaveasfilename(title='Save as Output Wav', defaultextension='pgp',
                                                     filetypes=[('Wave File (*.wav)', ".wav")])
    if (directory != ''):
        encrypt(key,msg)
        file = file[:-1]
        hide_data(file,"file.txt",directory,2)
        tkinter.messagebox.showinfo("Music Encrypt","Encrypted Successfully!")
class Encryption(tk.Frame):
    def __init__(self, master):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        tk.Frame.__init__(self, master)
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        master.title("Encryption")

        self.Label1 = tk.Label()
        self.Label1.place(relx=0.317, rely=0.067, height=51, width=204)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#ffffff")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 20 -weight bold -underline 1")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Encryption''')

        self.Label2 = tk.Label()
        self.Label2.place(relx=0.017, rely=0.333, height=41, width=134)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#ffffff")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Segoe UI} -size 17 -weight bold")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Public Key:''')

        self.Text1 = tk.Text()
        self.Text1.place(relx=0.267, rely=0.356, relheight=0.12, relwidth=0.422)
        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(selectforeground="black")
        self.Text1.configure(width=394)
        self.Text1.configure(wrap="word")

        self.Button1 = tk.Button()
        self.Button1.place(relx=0.05, rely=0.511, height=44, width=107)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#26ffff")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(font="-family {Segoe UI} -size 15 -weight bold")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Browse''', command=lambda: openFile(self.Text2))


        self.Text2 = tk.Text()
        self.Text2.place(relx=0.267, rely=0.511, relheight=0.098, relwidth=0.657)

        self.Text2.configure(background="white")
        self.Text2.configure(font="TkTextFont")
        self.Text2.configure(foreground="black")
        self.Text2.configure(highlightbackground="#d9d9d9")
        self.Text2.configure(highlightcolor="black")
        self.Text2.configure(insertbackground="black")
        self.Text2.configure(selectbackground="#c4c4c4")
        self.Text2.configure(selectforeground="black")
        self.Text2.configure(width=394)
        self.Text2.configure(wrap="word")

        self.Label3 = tk.Label()
        self.Label3.place(relx=0.017, rely=0.622, height=31, width=154)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#ffffff")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font="-family {Segoe UI} -size 17 -weight bold")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Message:''')
        sv = StringVar()
        sv.trace("w", lambda name, index, mode, sv=sv: callback(sv))
        def callback(sv):
            self.CountLbl.configure(text=str(len(sv.get()))+'''/85''')
        self.Text3 = tk.Entry(textvariable=sv)
        self.Text3.place(relx=0.267, rely=0.644, relheight=0.187, relwidth=0.657)
        self.Text3.configure(background="white")
        self.Text3.configure(font="TkTextFont")
        self.Text3.configure(foreground="black")
        self.Text3.configure(highlightbackground="#d9d9d9")
        self.Text3.configure(highlightcolor="black")
        self.Text3.configure(insertbackground="black")
        self.Text3.configure(selectbackground="#c4c4c4")
        self.Text3.configure(selectforeground="black")
        self.Text3.configure(width=394)
        self.Button2 = tk.Button()
        self.Button2.place(relx=0.333, rely=0.844, height=52, width=176)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#25f4f4")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(font="-family {Segoe UI} -size 17 -weight bold")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Encrypt''',command=lambda : encryptmsg(self.Text1.get('1.0',END),self.Text3.get(),self.Text2.get('1.0',END)))
        data=dict(get_data())
        combobox_values = list(data.keys())
        self.TCombobox1 = ttk.Combobox(values=combobox_values)
        self.TCombobox1.place(relx=0.267, rely=0.222, relheight=0.091, relwidth=0.422)
        self.TCombobox1.configure(takefocus="")
        self.TCombobox1.bind('<<ComboboxSelected>>', self.modified)


        self.Label4 = tk.Label()
        self.Label4.place(relx=0.083, rely=0.2, height=41, width=104)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#ffffff")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(font="-family {Segoe UI} -size 18 -weight bold")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Search:''')

        self.CountLbl = tk.Label()
        self.CountLbl.place(relx=0.7, rely=0.85, height=51, width=100)
        self.CountLbl.configure(activebackground="#f9f9f9")
        self.CountLbl.configure(activeforeground="black")
        self.CountLbl.configure(background="#ffffff")
        self.CountLbl.configure(disabledforeground="#a3a3a3")
        self.CountLbl.configure(font="-family {Segoe UI} -size 10 ")
        self.CountLbl.configure(foreground="#000000")
        self.CountLbl.configure(highlightbackground="#d9d9d9")
        self.CountLbl.configure(highlightcolor="black")
        self.CountLbl.configure(text='''0/85''')
    def modified(self, event):
        data=dict(get_data())
        self.Text1.delete('1.0', END)
        self.Text1.insert('1.0',data[self.TCombobox1.get()]['pubkey'])

def openKey(text):
    of_opt = {}
    of_opt['filetypes'] = [('Key File (*.pgp)', ".pgp"), ('Text Files (*.txt)', ".txt")]
    filename = tkinter.filedialog.askopenfilename(**of_opt)
    if filename!='':
        text.delete('1.0', END)
        with open(filename,'r+b') as f:
            key = f.read().decode()
            text.insert('1.0', key)
message=""

def decryptmsg(privatekey,file,master):
    global message
    file = file[:-1]
    recover_data(file, "file_output.txt", 2)
    with open("file_output.txt") as readfile:
        todecrypt = readfile.read()
    try:
        message = decrypt(todecrypt,privatekey)
        messagebox.showinfo("Music Encrypt", "Decrypted Successfully!")
        master.switch_frame(Message)
    except Exception as e:
        messagebox.showinfo("Error", "Incorrect Decryption !")


def openFile(text):
    of_opt = {}
    of_opt['filetypes'] = [('WAV files', '.wav')]
    filename = tkinter.filedialog.askopenfilename(**of_opt)
    if filename:
        text.delete('1.0', END)
        text.insert('1.0', filename)


class Decryption(tk.Frame):
    def __init__(self, master):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        tk.Frame.__init__(self, master)

        master.title("Decryption")


        self.Label1 = tk.Label()
        self.Label1.place(relx=0.033, rely=0.0, height=61, width=164)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#ffffff")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 20 -weight bold -underline 1")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Decryption''')


        self.Label2 = tk.Label()
        self.Label2.place(relx=0.35, rely=0.2, height=31, width=124)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#ffffff")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Segoe UI} -size 13 -weight bold")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Private Key''')

        self.Text1 = tk.Text()
        self.Text1.place(relx=0.1, rely=0.289, relheight=0.142, relwidth=0.600)
        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(selectforeground="black")
        self.Text1.configure(width=454)
        self.Text1.configure(wrap="word")

        self.Text2 = tk.Text()
        self.Text2.place(relx=0.333, rely=0.533, relheight=0.098, relwidth=0.523)

        self.Text2.configure(background="white")
        self.Text2.configure(font="TkTextFont")
        self.Text2.configure(foreground="black")
        self.Text2.configure(highlightbackground="#d9d9d9")
        self.Text2.configure(highlightcolor="black")
        self.Text2.configure(insertbackground="black")
        self.Text2.configure(selectbackground="#c4c4c4")
        self.Text2.configure(selectforeground="black")
        self.Text2.configure(width=314)
        self.Text2.configure(wrap="word")
        self.Button1 = tk.Button()
        self.Button1.place(relx=0.1, rely=0.533, height=44, width=117)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#53f4ef")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(font="-family {Segoe UI} -size 12 -weight bold")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Browse''', command=lambda: openFile(self.Text2))

        self.importbtn = tk.Button()
        self.importbtn.place(relx=0.720, rely=0.310, height=44, width=117)
        self.importbtn.configure(activebackground="#ececec")
        self.importbtn.configure(activeforeground="#000000")
        self.importbtn.configure(background="#53f4ef")
        self.importbtn.configure(disabledforeground="#a3a3a3")
        self.importbtn.configure(font="-family {Segoe UI} -size 12 -weight bold")
        self.importbtn.configure(foreground="#000000")
        self.importbtn.configure(highlightbackground="#d9d9d9")
        self.importbtn.configure(highlightcolor="black")
        self.importbtn.configure(pady="0")
        self.importbtn.configure(text='''Import''', command=lambda: openKey(self.Text1))


        self.Button2 = tk.Button()
        self.Button2.place(relx=0.367, rely=0.733, height=54, width=167)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#23f7e9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(font="-family {Segoe UI} -size 20 -weight bold")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Decrypt''',command=lambda: (decryptmsg(self.Text1.get('1.0',END),self.Text2.get('1.0',END),master)))


class Message(tk.Frame):
    def __init__(self, master):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        tk.Frame.__init__(self, master)

        master.title("Message")


        self.Label1 = tk.Label()
        self.Label1.place(relx=0.367, rely=0.111, height=41, width=164)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#ffffff")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 20 -weight bold -underline 1")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Message :''')

        self.Text1 = tk.Text()
        self.Text1.place(relx=0.05, rely=0.289, relheight=0.653, relwidth=0.89)
        self.Text1.configure(background="#1ef7f7")
        self.Text1.configure(font="-family {Segoe UI} -size 14")
        self.Text1.configure(foreground="#000000")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(selectforeground="black")
        self.Text1.configure(width=534)
        self.Text1.configure(wrap="word")
        self.Text1.delete('1.0', END)
        self.Text1.insert('1.0',message)

# ======================================================
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# ======================================================


from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=1, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in miliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

# ===========================================================
#                   END of Class ToolTip
# ===========================================================
def center(win):
    """
    centers a tkinter window
    :param win: the root or Toplevel window to center
    """
    win.update_idletasks()
    width = win.winfo_width()
    frm_width = win.winfo_rootx() - win.winfo_x()
    win_width = width + 2 * frm_width
    height = win.winfo_height()
    titlebar_height = win.winfo_rooty() - win.winfo_y()
    win_height = height + titlebar_height + frm_width
    x = win.winfo_screenwidth() // 2 - win_width // 2
    y = win.winfo_screenheight() // 2 - win_height // 2
    win.geometry('{}x{}+{}+{}'.format(width, height, x, y))
    win.deiconify()

if __name__ == '__main__':
    app = MusicEncrypt()
    app.mainloop()





